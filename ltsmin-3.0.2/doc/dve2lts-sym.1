'\" t
.\"     Title: dve2lts-sym
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 12/17/2018
.\"    Manual: LTSmin Manual
.\"    Source: LTSmin 3.0.2
.\"  Language: English
.\"
.TH "DVE2LTS\-SYM" "1" "12/17/2018" "LTSmin 3\&.0\&.2" "LTSmin Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dve2lts-sym \- Symbolic reachability analysis for DiVinE DVE models\&.
.SH "SYNOPSIS"
.sp
\fBdve2lts\-sym\fR [OPTION]\&... \fIinput\fR<_\&.dve_|\fI\&.dve2C\fR> [\fIoutput\&.etf\fR]
.SH "DESCRIPTION"
.sp
dve2lts\-sym performs a reachability analysis on a specification provided in \fIinput\&.dve/input\&.dve2C\fR\&. Specifications are in \fIdve\fR format, or in \fIdve2C\fR format generated by the divine tool\&. \fIoutput\&.etf\fR specifies the name of the output \fBetf\fR(5)\&.
.SH "DIVINE"
.sp
Compile a DVE input model with divine:
.sp
.if n \{\
.RS 4
.\}
.nf
divine compile \-l input\&.dve
.fi
.if n \{\
.RE
.\}
.sp
.sp
The command results in a compiled model \fIinput\&.dve2C\fR\&.
.sp
If an LTL property is present in the model, a buchi automaton is created\&. LTSmin can directly perform LTL model checking on such models:
.sp
.if n \{\
.RS 4
.\}
.nf
dve2lts\-mc \-\-strategy=cndfs \-\-threads=16 anderson\&.6\&.prop4\&.dve2C
dve2lts\-seq \-\-por \-\-proviso=color \-\-strategy=scc anderson\&.6\&.prop4\&.dve
.fi
.if n \{\
.RE
.\}
.sp
.sp
These two examples perform LTL model checking using: multi\-core NDFS (cndfs), and a sequential SCC\-based algorithm with partial order reduction (\-\-por and \-\-proviso, where different provisos are available)\&. Again one can provide additional options to store traces, etc\&.
.sp
Note that this requires a modified version of the DiVinE toolset, which adds an LTSmin compilation backend (option \-l)\&. For availability, refer to the \m[blue]\fBLTSmin website\fR\m[]\&\s-2\u[1]\d\s+2\&.
.SH "OPTIONS"
.PP
\fB\-\-order\fR=\fIORDER\fR
.RS 4
Select the exploration strategy:
\fIbfs\-prev\fR,
\fIbfs\fR,
\fIchain\-prev\fR, or
\fIchain\fR\&. With
\fIbfs\-prev\fR
and
\fIbfs\fR, breadth\-first search is used\&. Here,
\fIbfs\-prev\fR
only considers the states found at the previous level, while
\fIbfs\fR
considers the whole visited set\&. With
\fIchain\-prev\fR
and
\fIchain\fR, a chaining strategy is used\&. Here,
\fIchain\-prev\fR
at each level starts from the states found at the previous level, while
\fIchain\fR
uses the whole visited set\&. Defaults to
\fIbfs\-prev\fR\&.
.sp
When using breadth\-first search, the tool performs the next state computation for all edge groups on the current level or current set of visited states\&. Chaining means to apply next state for the first group to the visited states, then apply next\-state for the second group to the result, etc\&. Thus, a chaining analysis can be completed in much less iterations than a BFS analysis\&.
.RE
.PP
\fB\-\-saturation\fR=\fISATURATION\fR
.RS 4
Select a saturation strategy:
\fInone\fR,
\fIsat\-like\fR,
\fIsat\-loop\fR,
\fIsat\-fix\fR,
\fIsat\fR\&. The
\fIsat\-like\fR
strategy goes up and down the levels of the BDD used to represent the state space\&. The
\fIsat\-loop\fR
strategy loops over the levels\&. The
\fIsat\-fix\fR
strategy repeatedly performs a fixpoint computation using saturation\&. The
\fIsat\fR
strategy does saturation as described in the literature with on\-the\-fly expansion of the transition relations\&. Defaults to
\fInone\fR, i\&.e\&. no saturation\&.
.sp
All strategies except
\fIsat\-fix\fR
and
\fIsat\fR
work in combination with the
\fIorder\fR
to saturate levels\&.
.RE
.PP
\fB\-\-sat\-granularity\fR=\fIGRANULARITY\fR
.RS 4
Select the granularity of
\fIsat\-like\fR
and
\fIsat\-loop\fR
strategies\&. The granularity indicates how many BDD levels are considered at the same time\&. Defaults to 10\&.
.RE
.PP
\fB\-\-save\-sat\-levels\fR
.RS 4
Save the previous states seen at saturation levels\&. This option has effect for any of the saturation strategies in combination with either
\fIbfs\-prev\fR
or
\fIchain\-prev\fR\&.
.RE
.PP
\fB\-\-guidance\fR=\fISTRATEGY\fR
.RS 4
Select a search strategy for searching for actions:
\fIunguided\fR,
\fIdirected\fR\&. The
\fIunguided\fR
strategy considers all transition groups\&. The
\fIdirected\fR
strategy focuses the search on the transition groups in which the action occurs\&. Defaults to
\fIunguided\fR\&.
.RE
.PP
\fB\-\-dot\fR=\fIDIR\fR
.RS 4
If this option is supplied
\fIDIR\fR
is a directory to which dot files of vector sets are written to\&. Note that this option should only be used for smaller vector sets because of disk space\&.
.sp
Three type of dot files are (over)written:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
current\-l<L>\&.dot: the nodes in the vector set at level L (and only level L),
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
visited\-l<L>\&.dot: the nodes in the vector set up to and included level L,
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
group_next\-l<L>\-k<K>\&.dot: the nodes in the transition relation of group K at level L\&.
.RE
.RE
.PP
\fB\-\-mu\fR=\fIMUFILE|MUFORMULA\fR
.RS 4
After computing all reachable states, evaluate the mu\-formula in
\fIMUFILE\fR
.sp
\fIMUFILE\fR
is a file containing a Mu Calculus formula (see
\fBltsmin-mu\fR(5))\&. Alternatively, the formula can be provide directly as MUFORMULA\&. This formula is a propositional formula with least and greatest fixpoint operator\&. It will be evaluated after generation of the complete state space\&.
.RE
.PP
\fB\-\-ctl\-star\fR=\fICTLFILE|CTLFORMULA\fR
.RS 4
\fICTLFILE\fR
is a file containing an Linear Temporal Logic Star (CTL*) formula (see
\fBltsmin-ctl\fR(5))\&. Which content can also be provided directly as
\fICTLFORMULA\fR\&. The formula is translated to a mu\-formula (see
\fBltsmin-mu\fR(5)), which is evaluated after computing all reachable states\&.
.RE
.PP
\fB\-\-no\-matrix\fR
.RS 4
Do not print the dependency matrix if \-v (verbose) is used\&.
.RE
.PP
\fB\-\-no\-soundness\-check\fR
.RS 4
When using
\fI\-\-pins\-guards=assume\-true\fR
disable the soundness check of the model specification\&. The soundness check may be expensive and can be disabled when the model specification is known to be sound\&. A guard may not evaluate to true or false but to maybe\&. A guard which evaluates to maybe depends on the evaluation of another guard\&. For languages such as Promela and DVE it checks whether if a guard evaluates to maybe there is another guard on the left which evaluates to false\&. For languages such as mCRL2 it also checks whether a guard on the right evaluates to false\&. If for all states this holds then the model specification is sound for guard\-splitting\&.
.RE
.PP
\fB\-\-precise\fR
.RS 4
Compute the final number of states precisely\&.
.RE
.PP
\fB\-\-next\-union\fR
.RS 4
If supported by the vset implementation; perform the computation of successor states simultaneously with unifying the current states\&. Simultaneously, means with a single BDD/MDD operation\&.
.RE
.PP
\fB\-\-inv\-par\fR
.RS 4
Checks all invariants in parallel\&.
.RE
.PP
\fB\-\-inv\-bin\-par\fR
.RS 4
Checks both sides of a binary operand in parallel in an invariant, requires
\fB\-\-inv\-par\fR\&. Note that this option may actually slow down invariant checking, because parallelization of a binary operand disables short\-circuit evaluation\&.
.RE
.PP
\fB\-n\fR, \fB\-\-no\-exit\fR
.RS 4
Do not exit when an error is found\&. Just count errors\&. Error counts are printed with
\-v\&.
.RE
.PP
\fB\-d\fR, \fB\-\-deadlock\fR
.RS 4
Find state with no outgoing transitions\&. Returns with exit code 1 if a deadlock is found, 0 or 255 (error) otherwise\&.
.RE
.PP
\fB\-i\fR, \fB\-\-invariant\fR=\fIPREDFILE|PREDEXPRESSION\fR
.RS 4
Find state where the invariant is violated\&. The file
\fIPREDFILE\fR
contains an expression in a simple predicate language (see
\fBltsmin-pred\fR(5))\&. Its contents can also be entered directly as a
\fIPREDEXPRESSION\fR\&. Returns with exit code 1 if a violation is found, 0 or 255 (error) otherwise\&.
.RE
.PP
\fB\-a\fR, \fB\-\-action\fR=\fISTRING\fR
.RS 4
Find state with an outgoing transition of type
\fISTRING\fR\&. Returns with exit code 1 if the action is found, 0 or 255 (error) otherwise\&.
.RE
.PP
\fB\-\-trace\fR=\*(AqFILE\*(Aq\fI\&.gcf\fR
.RS 4
When finding a deadlock state or a transition labelled with a certain action, write a trace to \*(AqFILE\*(Aq\fI\&.gcf\fR, beginning from the initial state\&. Traces can be pretty\-printed with
\fBltsmin-printtrace\fR(1)\&.
.RE
.SS "PINS Options"
.PP
\fB\-\-labels\fR
.RS 4
Print state variable, type and value names, and state and action labels\&. Then exit\&. Useful for writing predicate (\-\-invariant), LTL (\-\-ltl), CTL/CTL* (\-\-ctl), and mu\-calculus (\-\-mu) expressions\&.
.RE
.PP
\fB\-\-matrix\fR
.RS 4
Print the dependency matrix and exit\&.
.RE
.PP
\fB\-c\fR, \fB\-\-cache\fR
.RS 4
Enable caching of greybox calls\&.
.sp
If this option is used, the state space generator makes calls to the short version of the greybox next\-state function and memoizes the results\&. If the next\-state function is expensive this will yield substantial speedups\&.
.RE
.PP
\fB\-\-pins\-guards\fR
.RS 4
Use guards in combination with the long next\-state function to speed up the next\-state function\&.
.RE
.PP
\fB\-\-allow\-undefined\-edges\fR
.RS 4
Allow values for edge variables in atomic predicates to be unreachable\&.
.RE
.PP
\fB\-\-allow\-undefined\-values\fR
.RS 4
Allow undefined values in atomic predicates for enums\&.
.RE
.PP
\fB\-r\fR, \fB\-\-regroup\fR=\fISPEC\fR
.RS 4
Enable regrouping optimizations on the dependency matrix\&.
.sp
\fISPEC\fR
is a comma\-separated sequence of transformations
\fI<(\fR\fI\fIT\fR\fR\fI,)+>\fR
which are applied in this order to the dependency matrix\&. The following transformations
\fIT\fR
are available:
.PP
gs
.RS 4
Group Safely; macro for "\fBgc\fR,\fBgr\fR,\fBcw\fR,\fBrs\fR"; almost always a win\&.
.RE
.PP
ga
.RS 4
Group Aggressively (row subsumption); macro for "\fBgc\fR,\fBrs\fR,\fBru\fR,\fBcw\fR,\fBrs\fR"; can be a huge win, but in some cases causes slower state space generation\&.
.RE
.PP
gsa
.RS 4
Group Simulated Annealing; macro for "\fBgc\fR,\fBgr\fR,\fBcsa\fR,\fBrs\fR"; almost always a win; usually better than
\fBgs\fR\&.
.RE
.PP
gc
.RS 4
Group Columns; macro for "\fBcs\fR,\fBcn\fR"\&.
.RE
.PP
gr
.RS 4
Group Rows; macro for "\fBrs\fR,\fBrn\fR"\&.
.RE
.PP
cs
.RS 4
Column Sort; sort columns lexicographically\&.
.RE
.PP
cn
.RS 4
Column Nub; (temporarily) group duplicate columns, thereby making
\fIca\fR
more tractable\&. Requires
\fBcs\fR\&.
.RE
.PP
cw
.RS 4
Column sWap; minimize distance between columns by swapping them heuristically\&. This reordering improves performance of the symbolic data structures\&.
.RE
.PP
ca
.RS 4
Column All permutations; try to find the column permutation with the best cost metric\&. Potentially, this is an expensive operation\&.
.RE
.PP
csa
.RS 4
Column Simulated Annealing; minimize distance between columns by swapping them using simulated annealing\&.
.RE
.PP
rs
.RS 4
Row Sort; sort rows lexicographically\&.
.RE
.PP
rn
.RS 4
Row Nub; remove duplicate rows from the dependency matrix\&. This is always a win\&. Requires
\fBrs\fR\&.
.RE
.PP
ru
.RS 4
Row sUbsume; try to remove more rows than nubbing, thereby trading speed for memory\&. Requires
\fBrs\fR\&.
.RE
.PP
w2W
.RS 4
Over\-approximate all must\-write to may\-write\&. May\-write supports the copy (\-) dependency\&.
.RE
.PP
r2+
.RS 4
Over\-approximate read to read+write\&. Allows read dependencies to also subsume write dependencies\&.
.RE
.PP
w2+
.RS 4
Over\-approximate must\-write to read+write\&. Allows must\-write dependencies to also subsume read dependencies\&.
.RE
.PP
W2+
.RS 4
Over\-approximate may\-write to read+write\&. Allows must\-write dependencies to also subsume read dependencies\&.
.RE
.PP
\-2r
.RS 4
Over\-approximate copy to read\&. May be useful for testing whether the dependency matrix is correct\&.
.RE
.PP
rb4w
.RS 4
Use special heuristics to move read dependencies before write dependences\&. Often a win in symbolic state space generation\&.
.RE
.PP
mm
.RS 4
Writes metrics of the selected (\fBsr\fR,
\fBsw\fR,
\fBsc\fR) matrix to stdout\&. The following metrics are printed:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Event span: the total distance between the minimum and maximum column of rows\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Normalized event span: the event span divided by the size of the matrix (rows x columns)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Weighted event span: the weighted event span, the event span, including a moment signifying the location of the span\&. See, Siminiceanu et al\&., we use moment 1\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Normalized weighted event span: the weighted event span divided by the size of the matrix (rows x column)\&.
.RE
.RE
.PP
sr
.RS 4
Select the read matrix for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&.
.RE
.PP
sw
.RS 4
Select the write matrix (default) for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&. The write matrix is the default selection, because only write dependencies can create new nodes in decision diagrams\&. A bad variable order in the write matrix thus leads to a large number of peak nodes during reachability analysis\&. A bad variable order in the read matrix can also lead to a slow reachability analysis, but typically not as severe as a bad variable order in the write matrix\&. Slow reachability analysis due to a bad variable order in the read matrix causes many recursive calls to the relational product operation\&. Typically it is best that read dependencies are moved to the top DD level, thus left most in the read matrix\&.
.RE
.PP
sc
.RS 4
Select the combined matrix for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&. The combined matrix is the logical or of the read and write matrix\&.
.RE
.PP
bg
.RS 4
Use a bipartite graph (default) for
\fBbcm\fR,
\fBbk\fR,
\fBbs\fR,
\fBvcm\fR,
\fBvacm\fR
and
\fBvgps\fR\&.
.RE
.PP
tg
.RS 4
Create a total graph of the bipartite graph for
\fBbcm\fR,
\fBbk\fR,
\fBbs\fR,
\fBvcm\fR,
\fBvacm\fR
and
\fBvgps\fR\&. This adds more vertices and edges thus increasing computation time, but sometimes provides a better ordering\&.
.RE
.sp
Below, the sparse matrix algorithms prefixed with
\fBb\fR
are only available when LTSmin is compiled with Boost\&. Algorithms prefixed with
\fBv\fR
are only available when LTSmin is compiled with ViennaCL\&.
.PP
bcm
.RS 4
Apply Boost\(cqs Cuthill\-McKee ordering\&.
.RE
.PP
bk
.RS 4
Apply Boost\(cqs King ordering\&.
.RE
.PP
bs
.RS 4
Apply Boost\(cqs Sloan ordering\&.
.RE
.PP
vcm
.RS 4
Apply ViennaCL\(cqs Cuthill\-McKee ordering\&.
.RE
.PP
vacm
.RS 4
Apply ViennaCL\(cqs advanced Cuthill\-McKee ordering\&.
.RE
.PP
vgps
.RS 4
Apply ViennaCl\(cqs Gibbs\-Poole\-Stockmeyer ordering\&.
.RE
.PP
f
.RS 4
Apply FORCE ordering\&.
.RE
.RE
.PP
\fB\-\-row\-perm\fR=\fIPERM\fR
.RS 4
Apply row permutation
\fIPERM\fR, where
\fIPERM\fR
is a sequence of row numbers, separated by a comma\&. E\&.g\&. the vector 2,1,0 will swap row 2 with row 0\&.
.RE
.PP
\fB\-\-col\-perm\fR=\fIPERM\fR
.RS 4
Apply column permutation
\fIPERM\fR, where
\fIPERM\fR
is a sequence of column numbers, separated by a comma\&. E\&.g\&. the vector 2,1,0 will swap column 2 with column 0\&.
.RE
.PP
\fB\-\-col\-ins\fR=\fIPAIRS\fR
.RS 4
Insert columns before other columns in the dependency matrix\&.
.sp
\fIPAIRS\fR
is a comma\-separated sequence of pairs
\fI<(C\&.C\fR,)+>\*(Aq\&. E\&.g\&.
\fB\-\-col\-ins=1\&.0\fR
will insert column
\fB1\fR
before column
\fB0\fR\&. Each pair contains a source column
\fBC\fR
and a target column
\fBC\*(Aq\fR\&. During the application of the whole sequence,
\fBC\fR
will always be the column number that corresponds with the column before the application of the whole sequence\&. The column number
\fBC\*(Aq\fR
will always be the column during the application of the whole sequence\&. This means that in for example
\fB\-\-col\-ins=2\&.0,1\&.0\fR, first column
\fB2\fR
is inserted at position
\fB0\fR, then column
\fB1\fR
is inserted at position
\fB0\fR\&. The result will be that the original column
\fB2\fR
will be at position
\fB1\fR\&. Another important detail is that when
\fB\-\-col\-ins\fR
is used, all source columns will temporarily be "removed" during reordering from the dependency matrix, i\&.e\&. when the
\fB\-r\fR,\fB\-\-regroup\fR
option is given\&. After reordering is done, the columns will be inserted at the desired target position\&. In other words, reordering algorithms given by the option
\fB\-r\fR,\fB\-\-regroup\fR, will only be applied on the dependency matrix with source columns removed\&.
.RE
.PP
\fB\-\-sloan\-w1\fR=\fIWEIGHT1\fR
.RS 4
Use
\fIWEIGHT1\fR
as the first weight for the Sloan algorithm, see
\m[blue]\fBhttps://www\&.boost\&.org/doc/libs/1_66_0/libs/graph/doc/sloan_ordering\&.htm\fR\m[]\&.
.RE
.PP
\fB\-\-sloan\-w2\fR=\fIWEIGHT2\fR
.RS 4
Use
\fIWEIGHT2\fR
as the second weight for the Sloan algorithm, see
\m[blue]\fBhttps://www\&.boost\&.org/doc/libs/1_66_0/libs/graph/doc/sloan_ordering\&.htm\fR\m[]\&.
.RE
.PP
\fB\-\-graph\-metrics\fR
.RS 4
Print Boost\(cqs and ViennaCL\(cqs graph metrics (only available when LTSmin is compiled with Boost or ViennaCL)\&.
.RE
.PP
\fB\-\-regroup\-exit\fR
.RS 4
Exit with 0 when regrouping is done\&.
.RE
.PP
\fB\-\-regroup\-time\fR
.RS 4
Print timing information of each transformation, given in sequence
\fB\-\-regroup\fR
(\fB\-r\fR)\&.
.RE
.PP
\fB\-\-mucalc\fR=\fIFILE\fR|\fIFORMULA\fR
.RS 4
Compute a parity game for the mu\-calculus formula\&.
.sp
The mu\-calculus formula is provided in the file
\fIFILE\fR
or directly as a string
\fIFORMULA\fR\&. The syntax and tool support are described in
\fBltsmin-mucalc\fR(5)\&.
.RE
.PP
\fB\-\-por\fR=\fIheur|del\fR
.RS 4
Activate partial\-order reduction
.sp
Partial\-Order Reduction (POR) can reduce the state space when searching for deadlocks (\-d) or accepting cycles (\-\-ltl)\&. Two POR algorithms are available:
.PP
heur
.RS 4
Uses a cost\-based heuristic beam\-search to find the smallest stubborn set
.RE
.PP
del
.RS 4
Uses Valmari\(cqs deletion algorithm to find the smallest stubborn set by iteratively removing transitions while maintaining the constraints\&.
.RE
.RE
.PP
\fB\-\-weak\fR
.RS 4
Use weak commutativity in partial\-order reduction\&. Possibly yielding better reductions\&.
.RE
.PP
\fB\-\-leap\fR
.RS 4
Use leaping partial\-order reduction, by combining several disjoint stubborn sets sequentially\&.
.RE
.SH "ENVIRONMENT VARIABLES"
.sp
LTSmin supports the following list of environment variables\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Environment Variables:
.TS
allbox tab(:);
ltB ltB ltB.
T{
Name
T}:T{
Unit
T}:T{
Description
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
LTSMIN_MEM_SIZE
T}:T{
.sp
bytes
T}:T{
.sp
Sets the amount of system memory to the given value\&.
T}
T{
.sp
LTSMIN_NUM_CPUS
T}:T{
.sp
constant
T}:T{
.sp
Sets the amount of CPUs to the given value\&.
T}
.TE
.sp 1
.sp
The variables \fBLTSMIN_MEM_SIZE\fR, and \fBLTSMIN_NUM_CPUS\fR are particularly relevant when neither \fBsysconf(3)\fR nor \fBcgroups(7)\fR is able to properly detect these limits, e\&.g\&. when LTSmin runs on Travis CI in a docker container\&.
.SS "Symbolic Parity Game Options"
.sp
A symbolic parity game can be generated either by using the \-\-mucalc option or by using the PBES language module\&.
.PP
\fB\-\-pg\-solve\fR
.RS 4
Solve the generated parity game\&.
.RE
.PP
\fB\-\-pg\-reduce\fR
.RS 4
Reduce the generated parity game on\-the\-fly (experimental)\&.
.RE
.PP
\fB\-\-pg\-write=\fR\fB\fIFILE\fR\fR
.RS 4
Writes a symbolic parity game to
\fIFILE\fR\&.
.RE
.SS "Symbolic Parity Game Solver Options"
.PP
\fB\-\-attr\fR=\fIdefault\fR|\fIchain\fR|\fIpar\fR|\fIpar2\fR
.RS 4
Choose attractor function\&.
.sp
Available attractor functions:
.PP
\fIdefault\fR
.RS 4
Straightforward attractor computation\&.
.RE
.PP
\fIchain\fR
.RS 4
Chaining attractor, applies transition groups in a different order than
\fIdefault\fR
in computing an attractor level\&.
.RE
.PP
\fIpar\fR
.RS 4
Spawns parallel tasks to compute forward and backward steps for each attractor level\&.
.RE
.PP
\fIpar2\fR
.RS 4
Spawns more parallel tasks than
\fIpar\fR, by applying forward steps in parallel to the result of the backward steps of the different transition groups\&.
.RE
.RE
.PP
\fB\-\-saturating\-attractor\fR
.RS 4
Use saturation in the chaining attractor\&.
.RE
.PP
\fB\-\-pg\-write\-dot\fR
.RS 4
Write dot files to disk during parity game solving for debugging\&.
.RE
.SS "Vector Set Options"
.PP
\fB\-\-vset\fR=\fITYPE\fR
.RS 4
Select type of vector set:
\fIldd64\fR,
\fIldd\fR,
\fIlist\fR,
\fItree\fR,
\fIfdd\fR,
\fIddd\fR,
\fIsylvan\fR, or
\fIlddmc\fR\&. With
\fIldd64\fR, the 64\-bit ListDD list encoding is used (non\-ATerm based)\&. With
\fIldd\fR, the 32\-bit ListDD list encoding is used (non\-ATerm based)\&. With
\fIlist\fR, ATermDD with list encoding is used\&. With
\fItree\fR, ATermDD with tree encoding is used\&. With
\fIfdd\fR, BuDDy FDDs are used\&. With
\fIddd\fR, libDDD SDDs are used\&. With
\fIsylvan\fR, the parallel BDD package Sylvan is used\&. With
\fIlddmc\fR, the parallel LDD package LDDmc is used\&. Defaults to first available type in the list\&.
.RE
.PP
\fBvset\-cache\-diff\fR=\fIdiff\fR
.RS 4
Influences the size of operations cache when counting precisely with bignums: cache size = floor((2log(\fInodes\-to\-count\fR) + <diff>)^2)\&. More precisely; LTSmin will bitshift <diff> bits to the left or right on the number of nodes in the vector set, depending on the signedness of <diff>\&. The default is
\fB0\fR, meaning that if the cache is full the number of bignums in memory will be equal to the number of nodes in the vector set\&. The default value seems to work well, even when the number vectors in the vector set is very large relative to the number of nodes\&. If the number of vectors relative to the number of nodes is lower, <diff> may be decreased\&. The user may want to set <diff> as low as possible (to save memory), while keeping the operations cache effective\&. Bignums are not floating point numbers and may thus consume a lot of memory\&.
.RE
.SS "ListDD Options"
.PP
\fB\-\-ldd32\-step\fR=\fISTEP\fR
.RS 4
The internal tables of ListDD resize according to the Fibonacci series\&. This option sets the initial size to the Fibonacci number
\fISTEP\fR\&. Defaults to 30\&.
.RE
.PP
\fB\-\-ldd32\-cache\fR=\fIDIFF\fR
.RS 4
Set Fibonacci difference
\fIDIFF\fR
between the cache and nodes (DIFF may be negative)\&. Defaults to 1\&.
.RE
.SS "ListDD Options"
.PP
\fB\-\-ldd\-step\fR=\fISTEP\fR
.RS 4
The internal tables of ListDD resize according to the Fibonacci series\&. This option sets the initial size to the Fibonacci number
\fISTEP\fR\&. Defaults to 30\&.
.RE
.PP
\fB\-\-ldd\-cache\fR=\fIDIFF\fR
.RS 4
Set Fibonacci difference
\fIDIFF\fR
between the cache and nodes (DIFF may be negative)\&. Defaults to 1\&.
.RE
.SS "BuDDy Options"
.PP
\fB\-\-cache\-ratio\fR=\fIRATIO\fR
.RS 4
Set cache ration\&. Defaults to 64\&.
.RE
.PP
\fB\-\-max\-increase\fR=\fINUMBER\fR
.RS 4
Set maximum increase\&. Defaults to 1,000,000\&.
.RE
.PP
\fB\-\-min\-free\-nodes\fR=\fIPERCENTAGE\fR
.RS 4
Sets the minimum percentage of free nodes as integer between 0 and 100\&. Defaults to 20\&.
.RE
.PP
\fB\-\-fdd\-bits\fR=\fIBITS\fR
.RS 4
Sets the number of bits for each FDD variable\&. Defaults to 16\&.
.RE
.PP
\fB\-\-fdd\-reorder\fR=\fISTRATEGY\fR
.RS 4
Sets the strategy for dynamic variable reordering\&. Valid options are
\fInone\fR,
\fIwin2\fR,
\fIwin2ite\fR,
\fIwin3\fR,
\fIwin3ite\fR,
\fIsift\fR,
\fIsiftite\fR,
\fIrandom\fR\&. Refer to the
\m[blue]\fBBuDDy manual\fR\m[]\&\s-2\u[2]\d\s+2
for details\&. Defaults to
\fInone\fR\&.
.RE
.SS "Sylvan Options"
.PP
\fB\-\-sylvan\-threads\fR=\fINUMBER\fR
.RS 4
Set number of workers\&. Defaults to 1\&.
.RE
.sp
*\-\-sylvan\-dqsize Sets the size of the (static) task queue for work stealing in Wool to N\&. Defaults to 100000\&.
.PP
\fB\-\-sylvan\-tablesize\fR=\fINUMBER\fR
.RS 4
Sets the size of the BDD table to 1<<N nodes\&. Defaults to 23\&. Maximum of 29\&.
.RE
.PP
\fB\-\-sylvan\-cachesize\fR=\fINUMBER\fR
.RS 4
Set the size of the memoization table to 1<<N entries\&. Defaults to 23\&.
.RE
.PP
\fB\-\-sylvan\-bits\fR=\fIBITS\fR
.RS 4
Sets the number of bits for each integer in the state vector\&. Defaults to 16\&.
.RE
.PP
\fB\-\-sylvan\-granularity\fR=\fINUMBER\fR
.RS 4
Controls memoization table usage\&. Only use the memoization table every 1/N BDD levels\&. Defaults to 1, i\&.e\&., always use the table\&.
.RE
.SS "LDDmc Options"
.PP
\fB\-\-lddmc\-tablesize\fR=\fINUMBER\fR
.RS 4
Sets the size of the BDD table to 1<<N nodes\&. Defaults to 23\&. Maximum of 29\&.
.RE
.PP
\fB\-\-lddmc\-cachesize\fR=\fINUMBER\fR
.RS 4
Set the size of the memoization table to 1<<N entries\&. Defaults to 23\&.
.RE
.SS "Lace Options"
.PP
\fB\-\-lace\-workers\fR=\fINUMBER\fR
.RS 4
Set number of Lace workers (threads for parallelization)\&. Defaults to the number of available cores if parallel algorithms are used, 1 otherwise\&.
.RE
.PP
\fB\-\-lace\-dqsize\fR=\fINUMBER\fR
.RS 4
Set length of Lace task queue\&. Defaults to 40960000\&.
.RE
.PP
\fB\-\-lace\-stacksize\fR=\fINUMBER\fR
.RS 4
Set size of program stack in kilo bytes\&. Defaults to 0, which means using the default stack size\&.
.RE
.SS "General Options"
.PP
\fB\-v\fR
.RS 4
Increase the level of verbosity
.RE
.PP
\fB\-q\fR
.RS 4
Be quiet; do not print anything to the terminal\&.
.RE
.PP
\fB\-\-debug=<file\&.c>\fR
.RS 4
Enable debugging output for file\&.c (option allowed multiple times)\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print version string of this tool\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print help text
.RE
.PP
\fB\-\-usage\fR
.RS 4
Print short usage summary\&.
.RE
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Successful termination\&.
.RE
.PP
\fB1\fR
.RS 4
Counter example found\&.
.RE
.PP
\fB255\fR
.RS 4
Some error occurred\&.
.RE
.SH "SUPPORT"
.sp
Send questions, bug reports, comments and feature suggestions to the \m[blue]\fBLTSmin Support Team\fR\m[]\&\s-2\u[3]\d\s+2\&.
.SH "SEE ALSO"
.sp
\fBltsmin\fR(7), \fBetf\fR(5), \fBltsmin-mpi\fR(1), \fBltsmin-mucalc\fR(5), \fBltsmin-convert\fR(1), \fBltsmin-printtrace\fR(1), \m[blue]\fBICTAC 2008, LNCS 5160\fR\m[]\&\s-2\u[4]\d\s+2, \m[blue]\fBmuCRL\fR\m[]\&\s-2\u[5]\d\s+2, \m[blue]\fBmCRL2\fR\m[]\&\s-2\u[6]\d\s+2, \m[blue]\fBDiVinE 2\&.2\fR\m[]\&\s-2\u[7]\d\s+2, \m[blue]\fBMPI Forum\fR\m[]\&\s-2\u[8]\d\s+2, \m[blue]\fBBuDDy\fR\m[]\&\s-2\u[9]\d\s+2, \m[blue]\fBprom\fR\m[]\&\s-2\u[10]\d\s+2, and \m[blue]\fBProB\fR\m[]\&\s-2\u[11]\d\s+2
.SH "NOTES"
.IP " 1." 4
LTSmin website
.RS 4
\%http://fmt.cs.utwente.nl/tools/ltsmin/
.RE
.IP " 2." 4
BuDDy manual
.RS 4
\%http://buddy.sourceforge.net/manual/group__reorder.html
.RE
.IP " 3." 4
LTSmin Support Team
.RS 4
\%mailto:ltsmin-support@lists.utwente.nl
.RE
.IP " 4." 4
ICTAC 2008, LNCS 5160
.RS 4
\%http://dx.doi.org/10.1007/978-3-540-85762-4_6
.RE
.IP " 5." 4
muCRL
.RS 4
\%http://www.cwi.nl/~mcrl/
.RE
.IP " 6." 4
mCRL2
.RS 4
\%http://www.mcrl2.org/
.RE
.IP " 7." 4
DiVinE 2.2
.RS 4
\%http://divine.fi.muni.cz/
.RE
.IP " 8." 4
MPI Forum
.RS 4
\%http://www.mpi-forum.org/
.RE
.IP " 9." 4
BuDDy
.RS 4
\%http://buddy.sourceforge.net/
.RE
.IP "10." 4
prom
.RS 4
\%http://eprints.eemcs.utwente.nl/22042/
.RE
.IP "11." 4
ProB
.RS 4
\%https://www3.hhu.de/stups/prob/index.php/Main_Page
.RE
