'\" t
.\"     Title: etf
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 12/17/2018
.\"    Manual: LTSmin Manual
.\"    Source: LTSmin 3.0.2
.\"  Language: English
.\"
.TH "ETF" "5" "12/17/2018" "LTSmin 3\&.0\&.2" "LTSmin Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
etf \- enumerated table format
.SH "SYNOPSIS"
.sp
A text based intermediate format for PINS models for efficient storage of symbolically represented state spaces\&.
.SH "DESCRIPTION"
.sp
An ETF file is a sequence of sections\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The first section must be a state section, describing the state vector\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The second section must be an edge section, describing the edge labels\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
There must be a single init section, describing the initial state(s)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
There can be 0 or more map sections, defining a state label each\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
There can be 0 or more sort sections, describing the values of sorts\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
There can be 0 or more trans sections, describing a partition of the transition relation each\&.
.RE
.SH "GRAMMAR"
.sp
.if n \{\
.RS 4
.\}
.nf
etf         ::= state edge ( trans | map | sort )* init ( trans | map | sort )*
state       ::= "begin state"
                opt_decl*
                "end state"
edge        ::= "begin edge"
                declaration*
                "end edge"
init        ::= "begin init"
                number*
                "end init"
map         ::= "begin map" declaration
                mapentry*
                "end map"
trans       ::= "begin trans"
                transentry*
                "end trans"
sort        ::= "begin sort" ident
                value*
                "end ident"
opt_decl    ::= (ident | "_") ":" (ident | "_")
declaration ::= ident ":" ident
mapentry    ::= ( number | "*" ) * ( value | number )
transentry  ::= ((number "/" number)|"*")* ( value | number )*
ident       ::= \*(Aq_\*(Aq*[\*(Aq:print:\*(Aq] ([\*(Aq:print:\*(Aq]*
number      ::= [\*(Aq0\*(Aq\&.\&.\*(Aq9\*(Aq]+
value       ::= \*(Aqsee below\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note that the current parser is line based and requires that every section entry is one line and that the begins and end are also lines\&. This version supports three kinds of values:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A quoted string, e\&.g\&.,
"foo bar"
(contained double quotes and backward slashes must be escaped with a backward slash)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A hex encoding of a byte string\&. That is,
#
followed by pairs of hex digits encoding chars followed by
#\&. E\&.g\&.,
#61FF62FF63#\&.
.RE
.SH "EXAMPLE"
.sp
The LTS
.sp
.if n \{\
.RS 4
.\}
.nf
+\-\-\-\-\-\-\-+           +\-\-\-\-\-\-\-+
|+\-\-\-\-\-+|     a     |       |
|| 0 0 || \-\-\-\-\-\-\->  |  0 1  |
|+\-\-\-\-\-+|           |       |
+\-\-\-\-\-\-\-+           +\-\-\-\-\-\-\-+

    |                   |
    |b                  |b
    V                   V
   ___                 ___
  /   \e               /___\e
 /     \e     a       //   \e\e
|  1 0  | \-\-\-\-\-\-\->  || 1 1 ||
 \e     /             \e\e___//
  \e___/               \e___/
.fi
.if n \{\
.RE
.\}
.sp
.sp
with initial state 00 is represented by the ETF specification:
.sp
.if n \{\
.RS 4
.\}
.nf
begin state
shape:shape  multiplicity:multiplicity
end state
begin edge
action:action
end edge
begin init
0 0
end init
begin trans
0/1 * 1
end trans
begin trans
* 0/1 0
end trans
begin map shape:shape
0 * "square"
1 * "circle"
end map
begin map multiplicity:multiplicity
0 0 1
0 1 0
1 0 0
1 1 1
end map
begin sort action
"a"
"b"
end sort
begin sort multiplicity
"single"
"double"
end sort
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBltsmin\fR(7), \fBetf2lts-dist\fR(1), \fBetf2lts-seq\fR(1), \fBetf2lts-mc\fR(1), \fBetf2lts-sym\fR(1), \fBetf-convert\fR(1)
