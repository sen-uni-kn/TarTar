'\" t
.\"     Title: etf2torx
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 12/17/2018
.\"    Manual: LTSmin Manual
.\"    Source: LTSmin 3.0.2
.\"  Language: English
.\"
.TH "ETF2TORX" "1" "12/17/2018" "LTSmin 3\&.0\&.2" "LTSmin Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
etf2torx \- TorX RPC interface for ETF models\&.
.SH "SYNOPSIS"
.sp
\fBetf2torx\fR [OPTION]\&... \fIinput\&.etf\fR
.SH "DESCRIPTION"
.sp
etf2torx provides access to a labelled transition system from a specification provided in \fIinput\&.etf\fR via the TorX\-Explorer textual interface on \fIstdin\fR and \fIstdout\fR\&. Specifications are in \fBetf\fR(5) format\&.
.SH "OPTIONS"
.SS "PINS Options"
.PP
\fB\-\-labels\fR
.RS 4
Print state variable, type and value names, and state and action labels\&. Then exit\&. Useful for writing predicate (\-\-invariant), LTL (\-\-ltl), CTL/CTL* (\-\-ctl), and mu\-calculus (\-\-mu) expressions\&.
.RE
.PP
\fB\-\-matrix\fR
.RS 4
Print the dependency matrix and exit\&.
.RE
.PP
\fB\-c\fR, \fB\-\-cache\fR
.RS 4
Enable caching of greybox calls\&.
.sp
If this option is used, the state space generator makes calls to the short version of the greybox next\-state function and memoizes the results\&. If the next\-state function is expensive this will yield substantial speedups\&.
.RE
.PP
\fB\-\-pins\-guards\fR
.RS 4
Use guards in combination with the long next\-state function to speed up the next\-state function\&.
.RE
.PP
\fB\-\-allow\-undefined\-edges\fR
.RS 4
Allow values for edge variables in atomic predicates to be unreachable\&.
.RE
.PP
\fB\-\-allow\-undefined\-values\fR
.RS 4
Allow undefined values in atomic predicates for enums\&.
.RE
.PP
\fB\-r\fR, \fB\-\-regroup\fR=\fISPEC\fR
.RS 4
Enable regrouping optimizations on the dependency matrix\&.
.sp
\fISPEC\fR
is a comma\-separated sequence of transformations
\fI<(\fR\fI\fIT\fR\fR\fI,)+>\fR
which are applied in this order to the dependency matrix\&. The following transformations
\fIT\fR
are available:
.PP
gs
.RS 4
Group Safely; macro for "\fBgc\fR,\fBgr\fR,\fBcw\fR,\fBrs\fR"; almost always a win\&.
.RE
.PP
ga
.RS 4
Group Aggressively (row subsumption); macro for "\fBgc\fR,\fBrs\fR,\fBru\fR,\fBcw\fR,\fBrs\fR"; can be a huge win, but in some cases causes slower state space generation\&.
.RE
.PP
gsa
.RS 4
Group Simulated Annealing; macro for "\fBgc\fR,\fBgr\fR,\fBcsa\fR,\fBrs\fR"; almost always a win; usually better than
\fBgs\fR\&.
.RE
.PP
gc
.RS 4
Group Columns; macro for "\fBcs\fR,\fBcn\fR"\&.
.RE
.PP
gr
.RS 4
Group Rows; macro for "\fBrs\fR,\fBrn\fR"\&.
.RE
.PP
cs
.RS 4
Column Sort; sort columns lexicographically\&.
.RE
.PP
cn
.RS 4
Column Nub; (temporarily) group duplicate columns, thereby making
\fIca\fR
more tractable\&. Requires
\fBcs\fR\&.
.RE
.PP
cw
.RS 4
Column sWap; minimize distance between columns by swapping them heuristically\&. This reordering improves performance of the symbolic data structures\&.
.RE
.PP
ca
.RS 4
Column All permutations; try to find the column permutation with the best cost metric\&. Potentially, this is an expensive operation\&.
.RE
.PP
csa
.RS 4
Column Simulated Annealing; minimize distance between columns by swapping them using simulated annealing\&.
.RE
.PP
rs
.RS 4
Row Sort; sort rows lexicographically\&.
.RE
.PP
rn
.RS 4
Row Nub; remove duplicate rows from the dependency matrix\&. This is always a win\&. Requires
\fBrs\fR\&.
.RE
.PP
ru
.RS 4
Row sUbsume; try to remove more rows than nubbing, thereby trading speed for memory\&. Requires
\fBrs\fR\&.
.RE
.PP
w2W
.RS 4
Over\-approximate all must\-write to may\-write\&. May\-write supports the copy (\-) dependency\&.
.RE
.PP
r2+
.RS 4
Over\-approximate read to read+write\&. Allows read dependencies to also subsume write dependencies\&.
.RE
.PP
w2+
.RS 4
Over\-approximate must\-write to read+write\&. Allows must\-write dependencies to also subsume read dependencies\&.
.RE
.PP
W2+
.RS 4
Over\-approximate may\-write to read+write\&. Allows must\-write dependencies to also subsume read dependencies\&.
.RE
.PP
\-2r
.RS 4
Over\-approximate copy to read\&. May be useful for testing whether the dependency matrix is correct\&.
.RE
.PP
rb4w
.RS 4
Use special heuristics to move read dependencies before write dependences\&. Often a win in symbolic state space generation\&.
.RE
.PP
mm
.RS 4
Writes metrics of the selected (\fBsr\fR,
\fBsw\fR,
\fBsc\fR) matrix to stdout\&. The following metrics are printed:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Event span: the total distance between the minimum and maximum column of rows\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Normalized event span: the event span divided by the size of the matrix (rows x columns)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Weighted event span: the weighted event span, the event span, including a moment signifying the location of the span\&. See, Siminiceanu et al\&., we use moment 1\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Normalized weighted event span: the weighted event span divided by the size of the matrix (rows x column)\&.
.RE
.RE
.PP
sr
.RS 4
Select the read matrix for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&.
.RE
.PP
sw
.RS 4
Select the write matrix (default) for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&. The write matrix is the default selection, because only write dependencies can create new nodes in decision diagrams\&. A bad variable order in the write matrix thus leads to a large number of peak nodes during reachability analysis\&. A bad variable order in the read matrix can also lead to a slow reachability analysis, but typically not as severe as a bad variable order in the write matrix\&. Slow reachability analysis due to a bad variable order in the read matrix causes many recursive calls to the relational product operation\&. Typically it is best that read dependencies are moved to the top DD level, thus left most in the read matrix\&.
.RE
.PP
sc
.RS 4
Select the combined matrix for
\fBcs\fR,
\fBcsa\fR,
\fBcw\fR,
\fBca\fR,
\fBrs\fR,
\fBbcm\fR,
\fBbs\fR,
\fBbk\fR,
\fBvcm\fR,
\fBvacm\fR,
\fBvgps\fR
and
\fBmm\fR\&. The combined matrix is the logical or of the read and write matrix\&.
.RE
.PP
bg
.RS 4
Use a bipartite graph (default) for
\fBbcm\fR,
\fBbk\fR,
\fBbs\fR,
\fBvcm\fR,
\fBvacm\fR
and
\fBvgps\fR\&.
.RE
.PP
tg
.RS 4
Create a total graph of the bipartite graph for
\fBbcm\fR,
\fBbk\fR,
\fBbs\fR,
\fBvcm\fR,
\fBvacm\fR
and
\fBvgps\fR\&. This adds more vertices and edges thus increasing computation time, but sometimes provides a better ordering\&.
.RE
.sp
Below, the sparse matrix algorithms prefixed with
\fBb\fR
are only available when LTSmin is compiled with Boost\&. Algorithms prefixed with
\fBv\fR
are only available when LTSmin is compiled with ViennaCL\&.
.PP
bcm
.RS 4
Apply Boost\(cqs Cuthill\-McKee ordering\&.
.RE
.PP
bk
.RS 4
Apply Boost\(cqs King ordering\&.
.RE
.PP
bs
.RS 4
Apply Boost\(cqs Sloan ordering\&.
.RE
.PP
vcm
.RS 4
Apply ViennaCL\(cqs Cuthill\-McKee ordering\&.
.RE
.PP
vacm
.RS 4
Apply ViennaCL\(cqs advanced Cuthill\-McKee ordering\&.
.RE
.PP
vgps
.RS 4
Apply ViennaCl\(cqs Gibbs\-Poole\-Stockmeyer ordering\&.
.RE
.PP
f
.RS 4
Apply FORCE ordering\&.
.RE
.RE
.PP
\fB\-\-row\-perm\fR=\fIPERM\fR
.RS 4
Apply row permutation
\fIPERM\fR, where
\fIPERM\fR
is a sequence of row numbers, separated by a comma\&. E\&.g\&. the vector 2,1,0 will swap row 2 with row 0\&.
.RE
.PP
\fB\-\-col\-perm\fR=\fIPERM\fR
.RS 4
Apply column permutation
\fIPERM\fR, where
\fIPERM\fR
is a sequence of column numbers, separated by a comma\&. E\&.g\&. the vector 2,1,0 will swap column 2 with column 0\&.
.RE
.PP
\fB\-\-col\-ins\fR=\fIPAIRS\fR
.RS 4
Insert columns before other columns in the dependency matrix\&.
.sp
\fIPAIRS\fR
is a comma\-separated sequence of pairs
\fI<(C\&.C\fR,)+>\*(Aq\&. E\&.g\&.
\fB\-\-col\-ins=1\&.0\fR
will insert column
\fB1\fR
before column
\fB0\fR\&. Each pair contains a source column
\fBC\fR
and a target column
\fBC\*(Aq\fR\&. During the application of the whole sequence,
\fBC\fR
will always be the column number that corresponds with the column before the application of the whole sequence\&. The column number
\fBC\*(Aq\fR
will always be the column during the application of the whole sequence\&. This means that in for example
\fB\-\-col\-ins=2\&.0,1\&.0\fR, first column
\fB2\fR
is inserted at position
\fB0\fR, then column
\fB1\fR
is inserted at position
\fB0\fR\&. The result will be that the original column
\fB2\fR
will be at position
\fB1\fR\&. Another important detail is that when
\fB\-\-col\-ins\fR
is used, all source columns will temporarily be "removed" during reordering from the dependency matrix, i\&.e\&. when the
\fB\-r\fR,\fB\-\-regroup\fR
option is given\&. After reordering is done, the columns will be inserted at the desired target position\&. In other words, reordering algorithms given by the option
\fB\-r\fR,\fB\-\-regroup\fR, will only be applied on the dependency matrix with source columns removed\&.
.RE
.PP
\fB\-\-sloan\-w1\fR=\fIWEIGHT1\fR
.RS 4
Use
\fIWEIGHT1\fR
as the first weight for the Sloan algorithm, see
\m[blue]\fBhttps://www\&.boost\&.org/doc/libs/1_66_0/libs/graph/doc/sloan_ordering\&.htm\fR\m[]\&.
.RE
.PP
\fB\-\-sloan\-w2\fR=\fIWEIGHT2\fR
.RS 4
Use
\fIWEIGHT2\fR
as the second weight for the Sloan algorithm, see
\m[blue]\fBhttps://www\&.boost\&.org/doc/libs/1_66_0/libs/graph/doc/sloan_ordering\&.htm\fR\m[]\&.
.RE
.PP
\fB\-\-graph\-metrics\fR
.RS 4
Print Boost\(cqs and ViennaCL\(cqs graph metrics (only available when LTSmin is compiled with Boost or ViennaCL)\&.
.RE
.PP
\fB\-\-regroup\-exit\fR
.RS 4
Exit with 0 when regrouping is done\&.
.RE
.PP
\fB\-\-regroup\-time\fR
.RS 4
Print timing information of each transformation, given in sequence
\fB\-\-regroup\fR
(\fB\-r\fR)\&.
.RE
.PP
\fB\-\-mucalc\fR=\fIFILE\fR|\fIFORMULA\fR
.RS 4
Compute a parity game for the mu\-calculus formula\&.
.sp
The mu\-calculus formula is provided in the file
\fIFILE\fR
or directly as a string
\fIFORMULA\fR\&. The syntax and tool support are described in
\fBltsmin-mucalc\fR(5)\&.
.RE
.PP
\fB\-\-por\fR=\fIheur|del\fR
.RS 4
Activate partial\-order reduction
.sp
Partial\-Order Reduction (POR) can reduce the state space when searching for deadlocks (\-d) or accepting cycles (\-\-ltl)\&. Two POR algorithms are available:
.PP
heur
.RS 4
Uses a cost\-based heuristic beam\-search to find the smallest stubborn set
.RE
.PP
del
.RS 4
Uses Valmari\(cqs deletion algorithm to find the smallest stubborn set by iteratively removing transitions while maintaining the constraints\&.
.RE
.RE
.PP
\fB\-\-weak\fR
.RS 4
Use weak commutativity in partial\-order reduction\&. Possibly yielding better reductions\&.
.RE
.PP
\fB\-\-leap\fR
.RS 4
Use leaping partial\-order reduction, by combining several disjoint stubborn sets sequentially\&.
.RE
.SH "ENVIRONMENT VARIABLES"
.sp
LTSmin supports the following list of environment variables\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Environment Variables:
.TS
allbox tab(:);
ltB ltB ltB.
T{
Name
T}:T{
Unit
T}:T{
Description
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
LTSMIN_MEM_SIZE
T}:T{
.sp
bytes
T}:T{
.sp
Sets the amount of system memory to the given value\&.
T}
T{
.sp
LTSMIN_NUM_CPUS
T}:T{
.sp
constant
T}:T{
.sp
Sets the amount of CPUs to the given value\&.
T}
.TE
.sp 1
.sp
The variables \fBLTSMIN_MEM_SIZE\fR, and \fBLTSMIN_NUM_CPUS\fR are particularly relevant when neither \fBsysconf(3)\fR nor \fBcgroups(7)\fR is able to properly detect these limits, e\&.g\&. when LTSmin runs on Travis CI in a docker container\&.
.SS "General Options"
.PP
\fB\-v\fR
.RS 4
Increase the level of verbosity
.RE
.PP
\fB\-q\fR
.RS 4
Be quiet; do not print anything to the terminal\&.
.RE
.PP
\fB\-\-debug=<file\&.c>\fR
.RS 4
Enable debugging output for file\&.c (option allowed multiple times)\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print version string of this tool\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print help text
.RE
.PP
\fB\-\-usage\fR
.RS 4
Print short usage summary\&.
.RE
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Successful termination\&.
.RE
.PP
\fB255\fR
.RS 4
Some error occurred\&.
.RE
.SH "SUPPORT"
.sp
Send questions, bug reports, comments and feature suggestions to the \m[blue]\fBLTSmin Support Team\fR\m[]\&\s-2\u[1]\d\s+2\&.
.SH "SEE ALSO"
.sp
\fBltsmin\fR(7), \fBltsmin-convert\fR(1), \fBetf\fR(5), \m[blue]\fBmuCRL\fR\m[]\&\s-2\u[2]\d\s+2, \m[blue]\fBmCRL2\fR\m[]\&\s-2\u[3]\d\s+2, \m[blue]\fBDiVinE\-2\&.2\fR\m[]\&\s-2\u[4]\d\s+2, and \m[blue]\fBprom\fR\m[]\&\s-2\u[5]\d\s+2\&.
.SH "NOTES"
.IP " 1." 4
LTSmin Support Team
.RS 4
\%mailto:ltsmin-support@lists.utwente.nl
.RE
.IP " 2." 4
muCRL
.RS 4
\%http://www.cwi.nl/~mcrl/
.RE
.IP " 3." 4
mCRL2
.RS 4
\%http://www.mcrl2.org/
.RE
.IP " 4." 4
DiVinE-2.2
.RS 4
\%http://divine.fi.muni.cz/
.RE
.IP " 5." 4
prom
.RS 4
\%http://eprints.eemcs.utwente.nl/22042/
.RE
