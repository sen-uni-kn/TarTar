# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_udbm_int')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_udbm_int')
    _udbm_int = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_udbm_int', [dirname(__file__)])
        except ImportError:
            import _udbm_int
            return _udbm_int
        try:
            _mod = imp.load_module('_udbm_int', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _udbm_int = swig_import_helper()
    del swig_import_helper
else:
    import _udbm_int
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _udbm_int.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _udbm_int.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _udbm_int.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _udbm_int.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _udbm_int.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _udbm_int.SwigPyIterator_equal(self, x)

    def copy(self):
        return _udbm_int.SwigPyIterator_copy(self)

    def next(self):
        return _udbm_int.SwigPyIterator_next(self)

    def __next__(self):
        return _udbm_int.SwigPyIterator___next__(self)

    def previous(self):
        return _udbm_int.SwigPyIterator_previous(self)

    def advance(self, n):
        return _udbm_int.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _udbm_int.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _udbm_int.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _udbm_int.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _udbm_int.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _udbm_int.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _udbm_int.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _udbm_int.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VarNamesAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarNamesAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarNamesAccessor, name)
    __repr__ = _swig_repr

    def setClockName(self, index, name):
        return _udbm_int.VarNamesAccessor_setClockName(self, index, name)

    def __init__(self):
        this = _udbm_int.new_VarNamesAccessor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _udbm_int.delete_VarNamesAccessor
    __del__ = lambda self: None
VarNamesAccessor_swigregister = _udbm_int.VarNamesAccessor_swigregister
VarNamesAccessor_swigregister(VarNamesAccessor)

class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    __repr__ = _swig_repr

    def __init__(self, i, j, d, isStrict):
        this = _udbm_int.new_Constraint(i, j, d, isStrict)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _udbm_int.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _udbm_int.Constraint_swigregister
Constraint_swigregister(Constraint)

class IntClockValuation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntClockValuation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntClockValuation, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _udbm_int.new_IntClockValuation(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setClockValue(self, index, arg3):
        return _udbm_int.IntClockValuation_setClockValue(self, index, arg3)
    __swig_destroy__ = _udbm_int.delete_IntClockValuation
    __del__ = lambda self: None
IntClockValuation_swigregister = _udbm_int.IntClockValuation_swigregister
IntClockValuation_swigregister(IntClockValuation)

class DoubleClockValuation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleClockValuation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleClockValuation, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        this = _udbm_int.new_DoubleClockValuation(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setClockValue(self, index, arg3):
        return _udbm_int.DoubleClockValuation_setClockValue(self, index, arg3)
    __swig_destroy__ = _udbm_int.delete_DoubleClockValuation
    __del__ = lambda self: None
DoubleClockValuation_swigregister = _udbm_int.DoubleClockValuation_swigregister
DoubleClockValuation_swigregister(DoubleClockValuation)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _udbm_int.new_IntVector(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setElement(self, arg2, arg3):
        return _udbm_int.IntVector_setElement(self, arg2, arg3)
    __swig_destroy__ = _udbm_int.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _udbm_int.IntVector_swigregister
IntVector_swigregister(IntVector)

class Federation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Federation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Federation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _udbm_int.new_Federation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStr(self, arg2):
        return _udbm_int.Federation_toStr(self, arg2)

    def __ior__(self, arg2):
        return _udbm_int.Federation___ior__(self, arg2)

    def __iand__(self, arg2):
        return _udbm_int.Federation___iand__(self, arg2)

    def __iadd__(self, arg2):
        return _udbm_int.Federation___iadd__(self, arg2)

    def __isub__(self, arg2):
        return _udbm_int.Federation___isub__(self, arg2)

    def orOp(self, arg2):
        return _udbm_int.Federation_orOp(self, arg2)

    def andOp(self, arg2):
        return _udbm_int.Federation_andOp(self, arg2)

    def addOp(self, arg2):
        return _udbm_int.Federation_addOp(self, arg2)

    def minusOp(self, arg2):
        return _udbm_int.Federation_minusOp(self, arg2)

    def up(self):
        return _udbm_int.Federation_up(self)

    def down(self):
        return _udbm_int.Federation_down(self)

    def mergeReduce(self, arg2, arg3):
        return _udbm_int.Federation_mergeReduce(self, arg2, arg3)

    def freeClock(self, i):
        return _udbm_int.Federation_freeClock(self, i)

    def lt(self, arg2):
        return _udbm_int.Federation_lt(self, arg2)

    def gt(self, arg2):
        return _udbm_int.Federation_gt(self, arg2)

    def le(self, arg2):
        return _udbm_int.Federation_le(self, arg2)

    def ge(self, arg2):
        return _udbm_int.Federation_ge(self, arg2)

    def eq(self, arg2):
        return _udbm_int.Federation_eq(self, arg2)

    def setZero(self):
        return _udbm_int.Federation_setZero(self)

    def predt(self, arg2):
        return _udbm_int.Federation_predt(self, arg2)

    def intern(self):
        return _udbm_int.Federation_intern(self)

    def setInit(self):
        return _udbm_int.Federation_setInit(self)

    def convexHull(self):
        return _udbm_int.Federation_convexHull(self)

    def containsIntValuation(self, arg2):
        return _udbm_int.Federation_containsIntValuation(self, arg2)

    def containsDoubleValuation(self, arg2):
        return _udbm_int.Federation_containsDoubleValuation(self, arg2)

    def myExtrapolateMaxBounds(self, arg2):
        return _udbm_int.Federation_myExtrapolateMaxBounds(self, arg2)

    def hasZero(self):
        return _udbm_int.Federation_hasZero(self)

    def updateValue(self, x, v):
        return _udbm_int.Federation_updateValue(self, x, v)

    def updateIncrement(self, x, v):
        return _udbm_int.Federation_updateIncrement(self, x, v)

    def size(self):
        return _udbm_int.Federation_size(self)

    def hash(self):
        return _udbm_int.Federation_hash(self)

    def isEmpty(self):
        return _udbm_int.Federation_isEmpty(self)

    def tightenUp(self):
        return _udbm_int.Federation_tightenUp(self)

    def tightenDown(self):
        return _udbm_int.Federation_tightenDown(self)

    def relaxDown(self):
        return _udbm_int.Federation_relaxDown(self)

    def relaxUp(self):
        return _udbm_int.Federation_relaxUp(self)

    def relaxAll(self):
        return _udbm_int.Federation_relaxAll(self)

    def depends(self, i):
        return _udbm_int.Federation_depends(self, i)
    __swig_destroy__ = _udbm_int.delete_Federation
    __del__ = lambda self: None
Federation_swigregister = _udbm_int.Federation_swigregister
Federation_swigregister(Federation)


def fed_t_pointer_to_Federation(obj):
    return _udbm_int.fed_t_pointer_to_Federation(obj)
fed_t_pointer_to_Federation = _udbm_int.fed_t_pointer_to_Federation
# This file is compatible with both classic and new-style classes.


