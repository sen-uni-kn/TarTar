=== modified file 'dbm/DBMAllocator.cpp'
--- dbm/DBMAllocator.cpp	2011-12-05 13:14:10 +0000
+++ dbm/DBMAllocator.cpp	2011-12-05 14:11:56 +0000
@@ -34,10 +34,10 @@
 #include "DBMAllocator.h"
 #include "debug/new.h"
 
-#ifndef ENABLE_DBM_NEW
 
 namespace dbm
 {
+#ifndef ENABLE_DBM_NEW
     /* Go through the list of deallocated DBMs
      * and delete them all (ie really free memory).
      */
@@ -75,13 +75,10 @@
         dbm_allocator.cleanUp();
     }
 
-#endif // ENABLE_DBM_NEW
-
     // Instances.
     DBMTable dbm_table;
     DBMAllocator dbm_allocator;
+#endif // ENABLE_DBM_NEW
     base::ItemAllocator<alloc_ifed_t> ifed_allocator(200);
     base::ItemAllocator<alloc_fdbm_t> fdbm_allocator(600);
 }
-
-

=== modified file 'dbm/fed.cpp'
--- dbm/fed.cpp	2011-12-05 13:14:10 +0000
+++ dbm/fed.cpp	2011-12-05 13:33:49 +0000
@@ -3183,11 +3183,13 @@
                 base_bits2indexTable(bitDst, bitSize, table);
                 setDimension(newDim);
             }
+#ifndef ENABLE_DBM_NEW
             else if (newDim <= 1)
             {
                 *this = dbm_allocator.dbm1();
                 table[0] = 0;
             }
+#endif // ENABLE_DBM_NEW
             else
             {
                 cindex_t cols[newDim];
@@ -3212,10 +3214,12 @@
         {
             setDimension(newDim);
         }
+#ifndef ENABLE_DBM_NEW
         else if (newDim <= 1)
         {
             *this = dbm_allocator.dbm1();
         }
+#endif // ENABLE_DBM_NEW
         else
         {
             cindex_t oldDim = getDimension();

=== modified file 'dbm/fed_dbm.cpp'
--- dbm/fed_dbm.cpp	2011-12-05 13:14:10 +0000
+++ dbm/fed_dbm.cpp	2011-12-05 14:15:48 +0000
@@ -59,10 +59,12 @@
     void idbm_t::remove()
     {
         assert(refCounter == 0);
+#ifndef ENABLE_DBM_NEW
         if (isHashed())
         {
             dbm_table.remove(this);
         }
+#endif // ENABLE_DBM_NEW
         dbm_delete(this);
     }
 
@@ -250,6 +252,7 @@
             dbm_hasZero(const_dbm(), pdim());
     }
 
+#ifndef ENABLE_DBM_NEW
     void dbm_t::ptr_intern()
     {
         idbm_t *dbm = idbmt();
@@ -284,6 +287,7 @@
             dbm_table.incBuckets();
         }
     }
+#endif // ENABLE_DBM_NEW
 
     void dbm_t::copyFrom(const raw_t *src, cindex_t dim)
     {
@@ -412,11 +416,13 @@
         {
             RECORD_SUBSTAT("empty");
             dim = edim();
+#ifndef ENABLE_DBM_NEW
             if (dim == 1)
             {
                 newCopy(dbm_allocator.dbm1());
                 return *this;
             }
+#endif // ENABLE_DBM_NEW
         }
         else
         {
@@ -447,11 +453,13 @@
         {
             RECORD_SUBSTAT("empty");
             dim = edim();
+#ifndef ENABLE_DBM_NEW
             if (dim == 1)
             {
                 newCopy(dbm_allocator.dbm1());
                 return *this;
             }
+#endif // ENABLE_DBM_NEW
         }
         else
         {
@@ -1837,11 +1845,13 @@
                 base_bits2indexTable(bitDst, bitSize, table);
                 setEmpty(newDim);
             }
+#ifndef ENABLE_DBM_NEW
             else if (newDim <= 1)
             {
                 updateCopy(dbm_allocator.dbm1());
                 table[0] = 0;
             }
+#endif // ENABLE_DBM_NEW
             else
             {
                 idbm_t *old = idbmt();
@@ -1860,10 +1870,12 @@
         {
             setEmpty(newDim);
         }
+#ifndef ENABLE_DBM_NEW
         else if (newDim <= 1)
         {
             updateCopy(dbm_allocator.dbm1());
         }
+#endif // ENABLE_DBM_NEW
         else
         {
             idbm_t *old = idbmt();

=== modified file 'include/base/ItemAllocator.h'
--- include/base/ItemAllocator.h	2011-12-05 13:14:10 +0000
+++ include/base/ItemAllocator.h	2011-12-05 14:51:25 +0000
@@ -61,6 +61,7 @@
     template<class ITEM>
     class ItemAllocator
     {
+#ifndef ENABLE_DBM_NEW
     public:
 
         /** Default number of items.
@@ -180,6 +181,41 @@
         size_t numberOfItems; /**< number of items per pool */
         AllocPool_t *pool;         /**< allocated pools          */
         AllocCell_t *freeItem;     /**< list of free items       */
+
+#else // ifndef ENABLE_DBM_NEW
+
+    public:
+        /** Constructor */
+        ItemAllocator(size_t nbItems = 0)
+        {
+        }
+
+        /** Destructor */
+        ~ItemAllocator()
+        {
+        }
+
+        /** Allocate a new item.
+         * @return new allocated item.
+         * @post result != NULL
+         */
+        ITEM* allocate()
+        {
+            return new ITEM;
+        }
+
+        /** Deallocate an item.
+         * @param item: item to deallocate.
+         * @pre
+         * - item allocated with this allocator
+         * - item != NULL
+         */
+        void deallocate(ITEM *item)
+        {
+            assert(item);
+            delete item;
+        }
+#endif // ENABLE_DBM_NEW
     };
 
 } // namespace base

=== modified file 'include/dbm/fed.h'
--- include/dbm/fed.h	2011-12-05 13:14:10 +0000
+++ include/dbm/fed.h	2011-12-05 13:23:43 +0000
@@ -1705,7 +1705,11 @@
 
     /// Clean-up function useful for testing. Deallocate internally
     /// allocated DBMs that are currently free.
+#ifndef ENABLE_DBM_NEW
     void cleanUp();
+#else // ifndef ENABLE_DBM_NEW
+    static void cleanUp();
+#endif // ENABLE_DBM_NEW
 }
 
 #include "dbm/inline_fed.h"

=== modified file 'include/dbm/inline_fed.h'
--- include/dbm/inline_fed.h	2011-12-05 13:14:10 +0000
+++ include/dbm/inline_fed.h	2011-12-05 14:15:26 +0000
@@ -92,15 +92,8 @@
     /** Allocate memory with new.
      * @param dim: dimension of the idbm_t to allocate.
      */
-    static inline
-    void* dbm_new(cindex_t dim)
-    {
-#ifdef ENABLE_STORE_MINGRAPH
-        return new int32_t[intsizeof(idbm_t)+dim*dim+bits2intsize(dim*dim)];
-#else
-        return new int32_t[intsizeof(idbm_t)+dim*dim];
-#endif
-    }
+    static 
+    void* dbm_new(cindex_t dim);
 
     /** Deallocate memory as allocated by dbm_new.
      * @param dbm: idbm_t to deallocate.
@@ -205,7 +198,9 @@
         /// @pre refCounter == 1 && isHashed()
         void unhash() {
             assert(refCounter == 1 && isHashed());
+#ifndef ENABLE_DBM_NEW
             dbm_table.remove(this);
+#endif // ENABLE_DBM_NEW
             unmarkHashed();
         }
 
@@ -336,6 +331,21 @@
         raw_t matrix[];      //< DBM matrix
     };
 
+    /****************************************************
+     * Allocation of DBMs: by new allocator             *
+     ****************************************************/
+#ifdef ENABLE_DBM_NEW
+    static inline
+    void* dbm_new(cindex_t dim)
+    {
+#ifdef ENABLE_STORE_MINGRAPH
+        return new int32_t[intsizeof(idbm_t)+dim*dim+bits2intsize(dim*dim)];
+#else
+        return new int32_t[intsizeof(idbm_t)+dim*dim];
+#endif
+    }
+#endif // ENABLE_DBM_NEW
+
     /*********************************
      * Allocation of fdbm_t & ifed_t *
      *********************************/
@@ -957,7 +967,9 @@
 
     inline void dbm_t::intern()
     {
+#ifndef ENABLE_DBM_NEW
         if (!isEmpty()) ptr_intern();
+#endif // ENABLE_DBM_NEW
     }
 
     inline const raw_t* dbm_t::operator () () const

