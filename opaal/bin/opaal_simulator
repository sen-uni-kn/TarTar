#!/usr/bin/env python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Mads Chr. Olesen <mchro@cs.aau.dk>
#This program is free software: you can redistribute it and/or modify it 
#under the terms of the GNU General Public License version 3, as published 
#by the Free Software Foundation.
#
#This program is distributed in the hope that it will be useful, but 
#WITHOUT ANY WARRANTY; without even the implied warranties of 
#MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
#PURPOSE.  See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along 
#with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import logging
from difflib import SequenceMatcher
import random

import pyuppaal
from opaal.model_parsers.pyuppaal import SuccessorGenerator, GoalChecker
from opaal.model_parsers.pyuppaal import GenerateSuccessorGenerator
from opaal.passed_waiting_list import SimplePWList
from opaal.modelchecking_algorithms.reachability import McReachability

def info(type, value, tb):
   if hasattr(sys, 'ps1') or not sys.stderr.isatty():
      # we are in interactive mode or we don't have a tty-like
      # device, so we call the default hook
      sys.__excepthook__(type, value, tb)
   else:
      import traceback, pdb
      # we are NOT in interactive mode, print the exception...
      traceback.print_exception(type, value, tb)
      print
      # ...then start the debugger in post-mortem mode.
      pdb.pm()

sys.excepthook = info

#Interactive Prompt and Debugging for embedded python shell
try:
    import readline
except ImportError:
    print "Module readline not available."
else:
    import rlcompleter
    readline.parse_and_bind("tab: complete")

if __name__ != "__main__":
    print "Error: should be run!"
    sys.exit(1)

def createOptionParser():
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="usage: %prog [options] uppaalmodel.xml")
    parser.add_option("-v", "--verbose",
              action="store_true", dest="verbose", default=False,
              help="Print warnings")
    return parser

parser = createOptionParser()
(options, args) = parser.parse_args()

if not len(args) in [1]:
    parser.error("incorrect number of arguments")

loggingFormat = "%(levelname)s\t%(name)s\t%(message)s"
if options.verbose:
    logging.basicConfig(level=logging.DEBUG, format=loggingFormat)
else:
    logging.basicConfig(level=logging.WARNING, format=loggingFormat)

model_file = args[0]
model = pyuppaal.NTA.from_xml(model_file)

if len(args) > 1:
    query = args[1]
else:
    query = ""

#succgen = SuccessorGenerator(model)
succgen = GenerateSuccessorGenerator(model)

state = succgen.get_initialstate()
print "Initial state: ", state

print ""

COLOR_RED = '\033[91m'
COLOR_GREEN = '\033[92m'
COLOR_BLUE = '\033[94m'
COLOR_END = '\033[0m'
#based on code from beets
def colorize(color, text):
    return color + text + COLOR_END

def colordiff(a, b, highlight=COLOR_GREEN):
    """Given two strings, return the second strings with
    the differences highlighted in the specified color.
    """
    b_out = []
 
    matcher = SequenceMatcher(lambda x: False, a, b)
    for op, a_start, a_end, b_start, b_end in matcher.get_opcodes():
        if op == 'equal':
            # In both strings.
            b_out.append(b[b_start:b_end])
        elif op == 'insert':
            # Right only.
            b_out.append(colorize(highlight, b[b_start:b_end]))
        elif op == 'delete':
            # Left only.
            pass
        elif op == 'replace':
            # Right and left differ.
            b_out.append(colorize(highlight, b[b_start:b_end]))
        else:
            assert(False)
 
    return ''.join(b_out)


def print_succs(succs):
    i = 0
    for s in succs:
        print COLOR_BLUE, "%d)" % i, COLOR_END, colordiff(str(state), str(s))
        i += 1
    if i == 0:
        print COLOR_RED, "DEADLOCK", COLOR_END

def prompt_menu(succs):
    print_succs(succs)

    choice = ''
    int_choice = -1
    while True:
        try:
            choice = raw_input('Successor? ')
        except EOFError:
            print
            choice = "q"
        if choice in ['q', 'r', 't', 'g']:
            return choice

        try:
            int_choice = int(choice)
        except:
            int_choice = -1

        if int_choice >= 0 and int_choice < len(succs):
            return choice
        if len(succs) == 0:
            print COLOR_RED, "DEADLOCK", COLOR_END

from ctypes import pointer

choice = ''
while True:
    print "State is urgent: ", succgen._get_object_file().state_is_urgent(pointer(state))    
    succs = list(succgen.successors(state))

    choice = prompt_menu(succs)
    if choice == 'q':
        sys.exit()
    elif choice == 'r':
        #run until non-determinism
        while len(succs) == 1:
            state = succs[0]
            succs = list(succgen.successors(state))
            if len(succs) == 1:
                print_succs(succs)
    elif choice == 'g':
        #run randomly until interruption
        try:
            while len(succs) > 0:
                state = random.choice(succs)
                state = succs[0]
                succs = list(succgen.successors(state))
                if len(succs) > 0:
                    print_succs(succs)
        except KeyboardInterrupt:
            pass
    elif choice == 't':
        ##drop into Python shell
        #import code; code.interact(local=locals())
        #drop into IPython shell
        import IPython; IPython.embed()
    else:
        state = succs[int(choice)]

# vim:ts=4:sw=4:expandtab
